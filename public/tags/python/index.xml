<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Chad Nierenhausen</title>
    <link>http://chadnierenhausen.com/tags/python/</link>
    <description>Recent content in Python on Chad Nierenhausen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 May 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://chadnierenhausen.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hello World</title>
      <link>http://chadnierenhausen.com/post/hello-world</link>
      <pubDate>Wed, 13 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://chadnierenhausen.com/post/hello-world</guid>
      <description>

&lt;p&gt;This is the start to my blogging journey. My intent is to use this as a place to post about the things I am working on, both to possibly help others out there on the internets, and to help future me when I run into a problem that I solved before, but have since forgotten what the solution was.&lt;/p&gt;

&lt;p&gt;For my initial post, and to test the syntax highlighter, I want to post two little scripts I wrote to rig the results of a Kickball Prom King and Queen voting campaign.&lt;/p&gt;

&lt;h2 id=&#34;round-1-small-make-sure-adam-and-whitney-win-small:cc9c8e333413a4745b7d887da8e27dea&#34;&gt;Round 1 &lt;small&gt;- Make sure Adam and Whitney WIN!!&lt;/small&gt;&lt;/h2&gt;

&lt;p&gt;The first round was a multiple choice Survey Monkey poll that let you chose both King and Queen choices on the same page. So it was simply a matter of finding the two checkboxes on the page, selecting them and submitting the form. I used a Python library &lt;a href=&#34;https://github.com/hickford/MechanicalSoup&#34; target=&#34;_blank&#34;&gt;Mechanical Soup&lt;/a&gt; which opens a &amp;lsquo;browser object&amp;rsquo; points it to the specified url, finds the two inputs for the people I wanted to vote for and checks them, then submits the form. This doesn&amp;rsquo;t actually open a browser window, so it voted 439 times in about 7 minutes... I&amp;rsquo;m betting that they won&amp;rsquo;t run analytics here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import mechanicalsoup

for i in range(1, 439):
    br = mechanicalsoup.Browser()

    page = br.get(&#39;https://www.surveymonkey.com/r/SURVEY-ID&#39;)
    form = page.soup.form

    form.find(&amp;quot;input&amp;quot;, {&amp;quot;name&amp;quot;: &amp;quot;788222012[]&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;8873191506&amp;quot;})[&#39;checked&#39;] = &amp;quot;checked&amp;quot;


    form.find(&amp;quot;input&amp;quot;, {&amp;quot;name&amp;quot;: &amp;quot;788223053[]&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;8873193002&amp;quot;})[&#39;checked&#39;] = &amp;quot;checked&amp;quot;

    response = br.submit(form, page.url)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;round-2-small-they-can-not-stop-me-small:cc9c8e333413a4745b7d887da8e27dea&#34;&gt;Round 2 &lt;small&gt;- They can not stop me!&lt;/small&gt;&lt;/h2&gt;

&lt;p&gt;When the people your script voted for win by a margin of 400 votes you don&amp;rsquo;t need analytics to prove that someone isn&amp;rsquo;t playing by the rules. For round two the survey creators split the voting across two pages, and enabled the &amp;lsquo;One vote per computer&amp;rsquo; option on survey monkey. What Survey Monkey does when this option is set, is to put a cookie on your machine after you complete the survey, so if you return to the survey again it gives you a &amp;lsquo;You can only vote once&amp;rsquo; message. Chrome Incognito (the Web Developer&amp;rsquo;s best friend) to the rescue!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://selenium-python.readthedocs.org/&#34; target=&#34;_blank&#34;&gt;Selenium&lt;/a&gt; is a framework for automating testing of web user interfaces, and conveniently has a Python library. I also wanted to try and reduce the chance that if they did run analytics that they would see 70 submissions all at the same time. So I decide to try and make the votes a little more random, this script will vote once randomly every 15 - 45 minutes and it only will do that up to 70 times, or as many times as it can before the survey closes. This one actually opens a Chrome Incognito window, points it to the survey URL votes for the King, moves to the second page and votes for the Queen, submits the form and closes the browser.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import time
import random
from selenium import webdriver

chrome_options = webdriver.ChromeOptions()
chrome_options.add_argument(&amp;quot;--incognito&amp;quot;)

for i in range(1, 70):
    wait = random.randint(15, 45) * 60
    time.sleep(wait)
    driver = webdriver.Chrome(chrome_options=chrome_options)
    driver.get(&amp;quot;https://www.surveymonkey.com/r/SURVEY-ID&amp;quot;)

    whitney = driver.find_element_by_css_selector(&amp;quot;label[for=&#39;793400743_8907718403&#39;]&amp;quot;)
    whitney.click()
    whitney.submit()

    adam = driver.find_element_by_css_selector(&amp;quot;label[for=&#39;793403175_8907737022&#39;]&amp;quot;)
    adam.click()
    done = driver.find_element_by_class_name(&amp;quot;done-button&amp;quot;)
    done.click()
    driver.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;round-3-small-they-can-stop-me-small:cc9c8e333413a4745b7d887da8e27dea&#34;&gt;Round 3 &lt;small&gt;- They can stop me :(&lt;/small&gt;&lt;/h3&gt;

&lt;p&gt;For round three they decided to have everyone vote on the fields using &amp;lsquo;Physical Paper&amp;rsquo; and somehow our whole team didn&amp;rsquo;t know that this was happening and Adam and Whitney didn&amp;rsquo;t make it to the final four. Congratulations to your 2015 Prom King and Queen Paul and Patrick.&lt;/p&gt;

&lt;div id=&#34;fb-root&#34; markdown=&#34;0&#34;&gt;&lt;/div&gt;&lt;script&gt;(function(d, s, id) {  var js, fjs = d.getElementsByTagName(s)[0];  if (d.getElementById(id)) return;  js = d.createElement(s); js.id = id;  js.src = &#34;//connect.facebook.net/en_US/sdk.js#xfbml=1&amp;version=v2.3&#34;;  fjs.parentNode.insertBefore(js, fjs);}(document, &#39;script&#39;, &#39;facebook-jssdk&#39;));&lt;/script&gt;&lt;div class=&#34;fb-video&#34; data-allowfullscreen=&#34;true&#34; data-href=&#34;/kaylahazzard12/videos/vb.712569687/10153780970324688/?type=1&#34;&gt;&lt;div class=&#34;fb-xfbml-parse-ignore&#34;&gt;&lt;blockquote cite=&#34;/kaylahazzard12/videos/10153780970324688/&#34;&gt;&lt;a href=&#34;http://chadnierenhausen.com/kaylahazzard12/videos/10153780970324688/&#34;&gt;&lt;/a&gt;&lt;p&gt;First dance between Paul Frost (Prom King) and Patrick Edwards (Prom Queen).&lt;/p&gt;Posted by &lt;a href=&#34;https://www.facebook.com/kaylahazzard12&#34;&gt;Kayla Hazzard&lt;/a&gt; on Saturday, May 9, 2015&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This was the first web automation attempt I have ever made, and the first project (if you can call it that) I have ever written in Python. It was a fun excuse to try and game a system that didn&amp;rsquo;t really matter much to anyone, and I learned some things along the way. I&amp;rsquo;m also starting to suspect that you really can solve most programming problems in Python with a simple import statement.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>